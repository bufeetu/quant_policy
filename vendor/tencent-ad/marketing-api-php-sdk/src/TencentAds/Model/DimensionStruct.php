<?php
/**
 * DimensionStruct
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * DimensionStruct Class Doc Comment
 *
 * @category Class
 * @description 创意形式
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DimensionStruct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'dimension_struct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ratioWidth' => 'int',
        'ratioHeight' => 'int',
        'minWidth' => 'int',
        'minHeight' => 'int',
        'fileSizeKblimit' => 'int',
        'minDuration' => 'double',
        'maxDuration' => 'double',
        'creativeTemplateIds' => 'int[]',
        'mediaType' => 'string',
        'minOccurs' => 'int',
        'maxOccurs' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ratioWidth' => 'int64',
        'ratioHeight' => 'int64',
        'minWidth' => 'int64',
        'minHeight' => 'int64',
        'fileSizeKblimit' => 'int64',
        'minDuration' => 'double',
        'maxDuration' => 'double',
        'creativeTemplateIds' => 'int64',
        'mediaType' => null,
        'minOccurs' => 'int64',
        'maxOccurs' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ratioWidth' => 'ratio_width',
        'ratioHeight' => 'ratio_height',
        'minWidth' => 'min_width',
        'minHeight' => 'min_height',
        'fileSizeKblimit' => 'file_size_kblimit',
        'minDuration' => 'min_duration',
        'maxDuration' => 'max_duration',
        'creativeTemplateIds' => 'creative_template_ids',
        'mediaType' => 'media_type',
        'minOccurs' => 'min_occurs',
        'maxOccurs' => 'max_occurs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ratioWidth' => 'setRatioWidth',
        'ratioHeight' => 'setRatioHeight',
        'minWidth' => 'setMinWidth',
        'minHeight' => 'setMinHeight',
        'fileSizeKblimit' => 'setFileSizeKblimit',
        'minDuration' => 'setMinDuration',
        'maxDuration' => 'setMaxDuration',
        'creativeTemplateIds' => 'setCreativeTemplateIds',
        'mediaType' => 'setMediaType',
        'minOccurs' => 'setMinOccurs',
        'maxOccurs' => 'setMaxOccurs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ratioWidth' => 'getRatioWidth',
        'ratioHeight' => 'getRatioHeight',
        'minWidth' => 'getMinWidth',
        'minHeight' => 'getMinHeight',
        'fileSizeKblimit' => 'getFileSizeKblimit',
        'minDuration' => 'getMinDuration',
        'maxDuration' => 'getMaxDuration',
        'creativeTemplateIds' => 'getCreativeTemplateIds',
        'mediaType' => 'getMediaType',
        'minOccurs' => 'getMinOccurs',
        'maxOccurs' => 'getMaxOccurs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ratioWidth'] = isset($data['ratioWidth']) ? $data['ratioWidth'] : null;
        $this->container['ratioHeight'] = isset($data['ratioHeight']) ? $data['ratioHeight'] : null;
        $this->container['minWidth'] = isset($data['minWidth']) ? $data['minWidth'] : null;
        $this->container['minHeight'] = isset($data['minHeight']) ? $data['minHeight'] : null;
        $this->container['fileSizeKblimit'] = isset($data['fileSizeKblimit']) ? $data['fileSizeKblimit'] : null;
        $this->container['minDuration'] = isset($data['minDuration']) ? $data['minDuration'] : null;
        $this->container['maxDuration'] = isset($data['maxDuration']) ? $data['maxDuration'] : null;
        $this->container['creativeTemplateIds'] = isset($data['creativeTemplateIds']) ? $data['creativeTemplateIds'] : null;
        $this->container['mediaType'] = isset($data['mediaType']) ? $data['mediaType'] : null;
        $this->container['minOccurs'] = isset($data['minOccurs']) ? $data['minOccurs'] : null;
        $this->container['maxOccurs'] = isset($data['maxOccurs']) ? $data['maxOccurs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ratioWidth
     *
     * @return int|mixed
     */
    public function getRatioWidth()
    {
        return $this->container['ratioWidth'];
    }

    /**
     * Sets ratioWidth
     *
     * @param int|mixed $ratioWidth ratioWidth
     *
     * @return $this
     */
    public function setRatioWidth($ratioWidth)
    {
        $this->container['ratioWidth'] = $ratioWidth;

        return $this;
    }

    /**
     * Gets ratioHeight
     *
     * @return int|mixed
     */
    public function getRatioHeight()
    {
        return $this->container['ratioHeight'];
    }

    /**
     * Sets ratioHeight
     *
     * @param int|mixed $ratioHeight ratioHeight
     *
     * @return $this
     */
    public function setRatioHeight($ratioHeight)
    {
        $this->container['ratioHeight'] = $ratioHeight;

        return $this;
    }

    /**
     * Gets minWidth
     *
     * @return int|mixed
     */
    public function getMinWidth()
    {
        return $this->container['minWidth'];
    }

    /**
     * Sets minWidth
     *
     * @param int|mixed $minWidth minWidth
     *
     * @return $this
     */
    public function setMinWidth($minWidth)
    {
        $this->container['minWidth'] = $minWidth;

        return $this;
    }

    /**
     * Gets minHeight
     *
     * @return int|mixed
     */
    public function getMinHeight()
    {
        return $this->container['minHeight'];
    }

    /**
     * Sets minHeight
     *
     * @param int|mixed $minHeight minHeight
     *
     * @return $this
     */
    public function setMinHeight($minHeight)
    {
        $this->container['minHeight'] = $minHeight;

        return $this;
    }

    /**
     * Gets fileSizeKblimit
     *
     * @return int|mixed
     */
    public function getFileSizeKblimit()
    {
        return $this->container['fileSizeKblimit'];
    }

    /**
     * Sets fileSizeKblimit
     *
     * @param int|mixed $fileSizeKblimit fileSizeKblimit
     *
     * @return $this
     */
    public function setFileSizeKblimit($fileSizeKblimit)
    {
        $this->container['fileSizeKblimit'] = $fileSizeKblimit;

        return $this;
    }

    /**
     * Gets minDuration
     *
     * @return double|mixed
     */
    public function getMinDuration()
    {
        return $this->container['minDuration'];
    }

    /**
     * Sets minDuration
     *
     * @param double|mixed $minDuration minDuration
     *
     * @return $this
     */
    public function setMinDuration($minDuration)
    {
        $this->container['minDuration'] = $minDuration;

        return $this;
    }

    /**
     * Gets maxDuration
     *
     * @return double|mixed
     */
    public function getMaxDuration()
    {
        return $this->container['maxDuration'];
    }

    /**
     * Sets maxDuration
     *
     * @param double|mixed $maxDuration maxDuration
     *
     * @return $this
     */
    public function setMaxDuration($maxDuration)
    {
        $this->container['maxDuration'] = $maxDuration;

        return $this;
    }

    /**
     * Gets creativeTemplateIds
     *
     * @return int[]|mixed
     */
    public function getCreativeTemplateIds()
    {
        return $this->container['creativeTemplateIds'];
    }

    /**
     * Sets creativeTemplateIds
     *
     * @param int[]|mixed $creativeTemplateIds creativeTemplateIds
     *
     * @return $this
     */
    public function setCreativeTemplateIds($creativeTemplateIds)
    {
        $this->container['creativeTemplateIds'] = $creativeTemplateIds;

        return $this;
    }

    /**
     * Gets mediaType
     *
     * @return string|mixed
     */
    public function getMediaType()
    {
        return $this->container['mediaType'];
    }

    /**
     * Sets mediaType
     *
     * @param string|mixed $mediaType mediaType
     *
     * @return $this
     */
    public function setMediaType($mediaType)
    {
        $this->container['mediaType'] = $mediaType;

        return $this;
    }

    /**
     * Gets minOccurs
     *
     * @return int|mixed
     */
    public function getMinOccurs()
    {
        return $this->container['minOccurs'];
    }

    /**
     * Sets minOccurs
     *
     * @param int|mixed $minOccurs minOccurs
     *
     * @return $this
     */
    public function setMinOccurs($minOccurs)
    {
        $this->container['minOccurs'] = $minOccurs;

        return $this;
    }

    /**
     * Gets maxOccurs
     *
     * @return int|mixed
     */
    public function getMaxOccurs()
    {
        return $this->container['maxOccurs'];
    }

    /**
     * Sets maxOccurs
     *
     * @param int|mixed $maxOccurs maxOccurs
     *
     * @return $this
     */
    public function setMaxOccurs($maxOccurs)
    {
        $this->container['maxOccurs'] = $maxOccurs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


