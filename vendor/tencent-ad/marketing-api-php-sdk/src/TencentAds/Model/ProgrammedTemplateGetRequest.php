<?php
/**
 * ProgrammedTemplateGetRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * ProgrammedTemplateGetRequest Class Doc Comment
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProgrammedTemplateGetRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProgrammedTemplateGetRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accountId' => 'int',
        'materialDeriveId' => 'int',
        'materialGroupId' => 'int',
        'materialDerivePreviewId' => 'int',
        'templateIdList' => 'int[]',
        'keyWord' => 'string',
        'sortBy' => '\TencentAds\Model\SortByStruct[]',
        'pageInfo' => '\TencentAds\Model\PageInfoStruct'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accountId' => 'int64',
        'materialDeriveId' => 'int64',
        'materialGroupId' => 'int64',
        'materialDerivePreviewId' => 'int64',
        'templateIdList' => 'int64',
        'keyWord' => null,
        'sortBy' => null,
        'pageInfo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountId' => 'account_id',
        'materialDeriveId' => 'material_derive_id',
        'materialGroupId' => 'material_group_id',
        'materialDerivePreviewId' => 'material_derive_preview_id',
        'templateIdList' => 'template_id_list',
        'keyWord' => 'key_word',
        'sortBy' => 'sort_by',
        'pageInfo' => 'page_info'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountId' => 'setAccountId',
        'materialDeriveId' => 'setMaterialDeriveId',
        'materialGroupId' => 'setMaterialGroupId',
        'materialDerivePreviewId' => 'setMaterialDerivePreviewId',
        'templateIdList' => 'setTemplateIdList',
        'keyWord' => 'setKeyWord',
        'sortBy' => 'setSortBy',
        'pageInfo' => 'setPageInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountId' => 'getAccountId',
        'materialDeriveId' => 'getMaterialDeriveId',
        'materialGroupId' => 'getMaterialGroupId',
        'materialDerivePreviewId' => 'getMaterialDerivePreviewId',
        'templateIdList' => 'getTemplateIdList',
        'keyWord' => 'getKeyWord',
        'sortBy' => 'getSortBy',
        'pageInfo' => 'getPageInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
        $this->container['materialDeriveId'] = isset($data['materialDeriveId']) ? $data['materialDeriveId'] : null;
        $this->container['materialGroupId'] = isset($data['materialGroupId']) ? $data['materialGroupId'] : null;
        $this->container['materialDerivePreviewId'] = isset($data['materialDerivePreviewId']) ? $data['materialDerivePreviewId'] : null;
        $this->container['templateIdList'] = isset($data['templateIdList']) ? $data['templateIdList'] : null;
        $this->container['keyWord'] = isset($data['keyWord']) ? $data['keyWord'] : null;
        $this->container['sortBy'] = isset($data['sortBy']) ? $data['sortBy'] : null;
        $this->container['pageInfo'] = isset($data['pageInfo']) ? $data['pageInfo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountId
     *
     * @return int|mixed
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param int|mixed $accountId accountId
     *
     * @return $this
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets materialDeriveId
     *
     * @return int|mixed
     */
    public function getMaterialDeriveId()
    {
        return $this->container['materialDeriveId'];
    }

    /**
     * Sets materialDeriveId
     *
     * @param int|mixed $materialDeriveId materialDeriveId
     *
     * @return $this
     */
    public function setMaterialDeriveId($materialDeriveId)
    {
        $this->container['materialDeriveId'] = $materialDeriveId;

        return $this;
    }

    /**
     * Gets materialGroupId
     *
     * @return int|mixed
     */
    public function getMaterialGroupId()
    {
        return $this->container['materialGroupId'];
    }

    /**
     * Sets materialGroupId
     *
     * @param int|mixed $materialGroupId materialGroupId
     *
     * @return $this
     */
    public function setMaterialGroupId($materialGroupId)
    {
        $this->container['materialGroupId'] = $materialGroupId;

        return $this;
    }

    /**
     * Gets materialDerivePreviewId
     *
     * @return int|mixed
     */
    public function getMaterialDerivePreviewId()
    {
        return $this->container['materialDerivePreviewId'];
    }

    /**
     * Sets materialDerivePreviewId
     *
     * @param int|mixed $materialDerivePreviewId materialDerivePreviewId
     *
     * @return $this
     */
    public function setMaterialDerivePreviewId($materialDerivePreviewId)
    {
        $this->container['materialDerivePreviewId'] = $materialDerivePreviewId;

        return $this;
    }

    /**
     * Gets templateIdList
     *
     * @return int[]|mixed
     */
    public function getTemplateIdList()
    {
        return $this->container['templateIdList'];
    }

    /**
     * Sets templateIdList
     *
     * @param int[]|mixed $templateIdList templateIdList
     *
     * @return $this
     */
    public function setTemplateIdList($templateIdList)
    {
        $this->container['templateIdList'] = $templateIdList;

        return $this;
    }

    /**
     * Gets keyWord
     *
     * @return string|mixed
     */
    public function getKeyWord()
    {
        return $this->container['keyWord'];
    }

    /**
     * Sets keyWord
     *
     * @param string|mixed $keyWord keyWord
     *
     * @return $this
     */
    public function setKeyWord($keyWord)
    {
        $this->container['keyWord'] = $keyWord;

        return $this;
    }

    /**
     * Gets sortBy
     *
     * @return \TencentAds\Model\SortByStruct[]|mixed
     */
    public function getSortBy()
    {
        return $this->container['sortBy'];
    }

    /**
     * Sets sortBy
     *
     * @param \TencentAds\Model\SortByStruct[]|mixed $sortBy sortBy
     *
     * @return $this
     */
    public function setSortBy($sortBy)
    {
        $this->container['sortBy'] = $sortBy;

        return $this;
    }

    /**
     * Gets pageInfo
     *
     * @return \TencentAds\Model\PageInfoStruct|mixed
     */
    public function getPageInfo()
    {
        return $this->container['pageInfo'];
    }

    /**
     * Sets pageInfo
     *
     * @param \TencentAds\Model\PageInfoStruct|mixed $pageInfo pageInfo
     *
     * @return $this
     */
    public function setPageInfo($pageInfo)
    {
        $this->container['pageInfo'] = $pageInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


