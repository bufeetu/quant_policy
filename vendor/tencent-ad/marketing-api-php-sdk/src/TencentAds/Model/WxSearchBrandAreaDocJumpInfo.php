<?php
/**
 * WxSearchBrandAreaDocJumpInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * WxSearchBrandAreaDocJumpInfo Class Doc Comment
 *
 * @category Class
 * @description 微信搜一搜品牌专区-通用跳转结构
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WxSearchBrandAreaDocJumpInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'wx_search_brand_area_doc_jump_info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'jumpType' => 'int',
        'userName' => 'string',
        'weappUrl' => 'string',
        'jumpUrl' => 'string',
        'feedId' => 'string',
        'commentScene' => 'int',
        'feedNonceId' => 'string',
        'extInfo' => 'string',
        'canvasId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'jumpType' => 'int64',
        'userName' => null,
        'weappUrl' => null,
        'jumpUrl' => null,
        'feedId' => null,
        'commentScene' => 'int64',
        'feedNonceId' => null,
        'extInfo' => null,
        'canvasId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'jumpType' => 'jump_type',
        'userName' => 'user_name',
        'weappUrl' => 'weapp_url',
        'jumpUrl' => 'jump_url',
        'feedId' => 'feed_id',
        'commentScene' => 'comment_scene',
        'feedNonceId' => 'feed_nonce_id',
        'extInfo' => 'ext_info',
        'canvasId' => 'canvas_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'jumpType' => 'setJumpType',
        'userName' => 'setUserName',
        'weappUrl' => 'setWeappUrl',
        'jumpUrl' => 'setJumpUrl',
        'feedId' => 'setFeedId',
        'commentScene' => 'setCommentScene',
        'feedNonceId' => 'setFeedNonceId',
        'extInfo' => 'setExtInfo',
        'canvasId' => 'setCanvasId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'jumpType' => 'getJumpType',
        'userName' => 'getUserName',
        'weappUrl' => 'getWeappUrl',
        'jumpUrl' => 'getJumpUrl',
        'feedId' => 'getFeedId',
        'commentScene' => 'getCommentScene',
        'feedNonceId' => 'getFeedNonceId',
        'extInfo' => 'getExtInfo',
        'canvasId' => 'getCanvasId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['jumpType'] = isset($data['jumpType']) ? $data['jumpType'] : null;
        $this->container['userName'] = isset($data['userName']) ? $data['userName'] : null;
        $this->container['weappUrl'] = isset($data['weappUrl']) ? $data['weappUrl'] : null;
        $this->container['jumpUrl'] = isset($data['jumpUrl']) ? $data['jumpUrl'] : null;
        $this->container['feedId'] = isset($data['feedId']) ? $data['feedId'] : null;
        $this->container['commentScene'] = isset($data['commentScene']) ? $data['commentScene'] : null;
        $this->container['feedNonceId'] = isset($data['feedNonceId']) ? $data['feedNonceId'] : null;
        $this->container['extInfo'] = isset($data['extInfo']) ? $data['extInfo'] : null;
        $this->container['canvasId'] = isset($data['canvasId']) ? $data['canvasId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets jumpType
     *
     * @return int|mixed
     */
    public function getJumpType()
    {
        return $this->container['jumpType'];
    }

    /**
     * Sets jumpType
     *
     * @param int|mixed $jumpType jumpType
     *
     * @return $this
     */
    public function setJumpType($jumpType)
    {
        $this->container['jumpType'] = $jumpType;

        return $this;
    }

    /**
     * Gets userName
     *
     * @return string|mixed
     */
    public function getUserName()
    {
        return $this->container['userName'];
    }

    /**
     * Sets userName
     *
     * @param string|mixed $userName userName
     *
     * @return $this
     */
    public function setUserName($userName)
    {
        $this->container['userName'] = $userName;

        return $this;
    }

    /**
     * Gets weappUrl
     *
     * @return string|mixed
     */
    public function getWeappUrl()
    {
        return $this->container['weappUrl'];
    }

    /**
     * Sets weappUrl
     *
     * @param string|mixed $weappUrl weappUrl
     *
     * @return $this
     */
    public function setWeappUrl($weappUrl)
    {
        $this->container['weappUrl'] = $weappUrl;

        return $this;
    }

    /**
     * Gets jumpUrl
     *
     * @return string|mixed
     */
    public function getJumpUrl()
    {
        return $this->container['jumpUrl'];
    }

    /**
     * Sets jumpUrl
     *
     * @param string|mixed $jumpUrl jumpUrl
     *
     * @return $this
     */
    public function setJumpUrl($jumpUrl)
    {
        $this->container['jumpUrl'] = $jumpUrl;

        return $this;
    }

    /**
     * Gets feedId
     *
     * @return string|mixed
     */
    public function getFeedId()
    {
        return $this->container['feedId'];
    }

    /**
     * Sets feedId
     *
     * @param string|mixed $feedId feedId
     *
     * @return $this
     */
    public function setFeedId($feedId)
    {
        $this->container['feedId'] = $feedId;

        return $this;
    }

    /**
     * Gets commentScene
     *
     * @return int|mixed
     */
    public function getCommentScene()
    {
        return $this->container['commentScene'];
    }

    /**
     * Sets commentScene
     *
     * @param int|mixed $commentScene commentScene
     *
     * @return $this
     */
    public function setCommentScene($commentScene)
    {
        $this->container['commentScene'] = $commentScene;

        return $this;
    }

    /**
     * Gets feedNonceId
     *
     * @return string|mixed
     */
    public function getFeedNonceId()
    {
        return $this->container['feedNonceId'];
    }

    /**
     * Sets feedNonceId
     *
     * @param string|mixed $feedNonceId feedNonceId
     *
     * @return $this
     */
    public function setFeedNonceId($feedNonceId)
    {
        $this->container['feedNonceId'] = $feedNonceId;

        return $this;
    }

    /**
     * Gets extInfo
     *
     * @return string|mixed
     */
    public function getExtInfo()
    {
        return $this->container['extInfo'];
    }

    /**
     * Sets extInfo
     *
     * @param string|mixed $extInfo extInfo
     *
     * @return $this
     */
    public function setExtInfo($extInfo)
    {
        $this->container['extInfo'] = $extInfo;

        return $this;
    }

    /**
     * Gets canvasId
     *
     * @return string|mixed
     */
    public function getCanvasId()
    {
        return $this->container['canvasId'];
    }

    /**
     * Sets canvasId
     *
     * @param string|mixed $canvasId canvasId
     *
     * @return $this
     */
    public function setCanvasId($canvasId)
    {
        $this->container['canvasId'] = $canvasId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


