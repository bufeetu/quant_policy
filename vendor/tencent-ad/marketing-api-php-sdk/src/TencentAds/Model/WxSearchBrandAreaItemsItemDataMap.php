<?php
/**
 * WxSearchBrandAreaItemsItemDataMap
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * WxSearchBrandAreaItemsItemDataMap Class Doc Comment
 *
 * @category Class
 * @description 微信搜一搜品牌专区-doc区块数据
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WxSearchBrandAreaItemsItemDataMap implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'wx_search_brand_area_items_item_data_map';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'zoneHeader' => '\TencentAds\Model\WxSearchBrandAreaDocZoneHeader',
        'basicInfo' => '\TencentAds\Model\WxSearchBrandAreaDocBasicInfo',
        'accountInfo' => '\TencentAds\Model\WxSearchBrandAreaDocAccountInfo',
        'activityInfo' => '\TencentAds\Model\WxSearchBrandAreaDocActivityInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'zoneHeader' => null,
        'basicInfo' => null,
        'accountInfo' => null,
        'activityInfo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'zoneHeader' => 'zone_header',
        'basicInfo' => 'basic_info',
        'accountInfo' => 'account_info',
        'activityInfo' => 'activity_info'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'zoneHeader' => 'setZoneHeader',
        'basicInfo' => 'setBasicInfo',
        'accountInfo' => 'setAccountInfo',
        'activityInfo' => 'setActivityInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'zoneHeader' => 'getZoneHeader',
        'basicInfo' => 'getBasicInfo',
        'accountInfo' => 'getAccountInfo',
        'activityInfo' => 'getActivityInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['zoneHeader'] = isset($data['zoneHeader']) ? $data['zoneHeader'] : null;
        $this->container['basicInfo'] = isset($data['basicInfo']) ? $data['basicInfo'] : null;
        $this->container['accountInfo'] = isset($data['accountInfo']) ? $data['accountInfo'] : null;
        $this->container['activityInfo'] = isset($data['activityInfo']) ? $data['activityInfo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets zoneHeader
     *
     * @return \TencentAds\Model\WxSearchBrandAreaDocZoneHeader|mixed
     */
    public function getZoneHeader()
    {
        return $this->container['zoneHeader'];
    }

    /**
     * Sets zoneHeader
     *
     * @param \TencentAds\Model\WxSearchBrandAreaDocZoneHeader|mixed $zoneHeader zoneHeader
     *
     * @return $this
     */
    public function setZoneHeader($zoneHeader)
    {
        $this->container['zoneHeader'] = $zoneHeader;

        return $this;
    }

    /**
     * Gets basicInfo
     *
     * @return \TencentAds\Model\WxSearchBrandAreaDocBasicInfo|mixed
     */
    public function getBasicInfo()
    {
        return $this->container['basicInfo'];
    }

    /**
     * Sets basicInfo
     *
     * @param \TencentAds\Model\WxSearchBrandAreaDocBasicInfo|mixed $basicInfo basicInfo
     *
     * @return $this
     */
    public function setBasicInfo($basicInfo)
    {
        $this->container['basicInfo'] = $basicInfo;

        return $this;
    }

    /**
     * Gets accountInfo
     *
     * @return \TencentAds\Model\WxSearchBrandAreaDocAccountInfo|mixed
     */
    public function getAccountInfo()
    {
        return $this->container['accountInfo'];
    }

    /**
     * Sets accountInfo
     *
     * @param \TencentAds\Model\WxSearchBrandAreaDocAccountInfo|mixed $accountInfo accountInfo
     *
     * @return $this
     */
    public function setAccountInfo($accountInfo)
    {
        $this->container['accountInfo'] = $accountInfo;

        return $this;
    }

    /**
     * Gets activityInfo
     *
     * @return \TencentAds\Model\WxSearchBrandAreaDocActivityInfo|mixed
     */
    public function getActivityInfo()
    {
        return $this->container['activityInfo'];
    }

    /**
     * Sets activityInfo
     *
     * @param \TencentAds\Model\WxSearchBrandAreaDocActivityInfo|mixed $activityInfo activityInfo
     *
     * @return $this
     */
    public function setActivityInfo($activityInfo)
    {
        $this->container['activityInfo'] = $activityInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


