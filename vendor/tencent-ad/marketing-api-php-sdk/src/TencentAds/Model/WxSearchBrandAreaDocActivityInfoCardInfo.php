<?php
/**
 * WxSearchBrandAreaDocActivityInfoCardInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * WxSearchBrandAreaDocActivityInfoCardInfo Class Doc Comment
 *
 * @category Class
 * @description 微信搜一搜品牌专区-doc区块-卡片信息
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WxSearchBrandAreaDocActivityInfoCardInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'wx_search_brand_area_doc_activity_info_card_info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cardType' => 'int',
        'imageUrl' => 'string',
        'videoUrl' => 'string',
        'jumpInfo' => '\TencentAds\Model\WxSearchBrandAreaDocJumpInfo',
        'menus' => '\TencentAds\Model\WxSearchBrandAreaDocActivityInfoMenus[]',
        'activityBlock' => '\TencentAds\Model\WxSearchBrandAreaDocActivityInfoActivityBlock',
        'finderUsername' => 'string',
        'hideNumberOfVisitors' => 'bool',
        'hideSource' => 'bool',
        'hideDataLabel' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cardType' => 'int64',
        'imageUrl' => null,
        'videoUrl' => null,
        'jumpInfo' => null,
        'menus' => null,
        'activityBlock' => null,
        'finderUsername' => null,
        'hideNumberOfVisitors' => null,
        'hideSource' => null,
        'hideDataLabel' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cardType' => 'card_type',
        'imageUrl' => 'image_url',
        'videoUrl' => 'video_url',
        'jumpInfo' => 'jump_info',
        'menus' => 'menus',
        'activityBlock' => 'activity_block',
        'finderUsername' => 'finder_username',
        'hideNumberOfVisitors' => 'hide_number_of_visitors',
        'hideSource' => 'hide_source',
        'hideDataLabel' => 'hide_data_label'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cardType' => 'setCardType',
        'imageUrl' => 'setImageUrl',
        'videoUrl' => 'setVideoUrl',
        'jumpInfo' => 'setJumpInfo',
        'menus' => 'setMenus',
        'activityBlock' => 'setActivityBlock',
        'finderUsername' => 'setFinderUsername',
        'hideNumberOfVisitors' => 'setHideNumberOfVisitors',
        'hideSource' => 'setHideSource',
        'hideDataLabel' => 'setHideDataLabel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cardType' => 'getCardType',
        'imageUrl' => 'getImageUrl',
        'videoUrl' => 'getVideoUrl',
        'jumpInfo' => 'getJumpInfo',
        'menus' => 'getMenus',
        'activityBlock' => 'getActivityBlock',
        'finderUsername' => 'getFinderUsername',
        'hideNumberOfVisitors' => 'getHideNumberOfVisitors',
        'hideSource' => 'getHideSource',
        'hideDataLabel' => 'getHideDataLabel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cardType'] = isset($data['cardType']) ? $data['cardType'] : null;
        $this->container['imageUrl'] = isset($data['imageUrl']) ? $data['imageUrl'] : null;
        $this->container['videoUrl'] = isset($data['videoUrl']) ? $data['videoUrl'] : null;
        $this->container['jumpInfo'] = isset($data['jumpInfo']) ? $data['jumpInfo'] : null;
        $this->container['menus'] = isset($data['menus']) ? $data['menus'] : null;
        $this->container['activityBlock'] = isset($data['activityBlock']) ? $data['activityBlock'] : null;
        $this->container['finderUsername'] = isset($data['finderUsername']) ? $data['finderUsername'] : null;
        $this->container['hideNumberOfVisitors'] = isset($data['hideNumberOfVisitors']) ? $data['hideNumberOfVisitors'] : null;
        $this->container['hideSource'] = isset($data['hideSource']) ? $data['hideSource'] : null;
        $this->container['hideDataLabel'] = isset($data['hideDataLabel']) ? $data['hideDataLabel'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cardType
     *
     * @return int|mixed
     */
    public function getCardType()
    {
        return $this->container['cardType'];
    }

    /**
     * Sets cardType
     *
     * @param int|mixed $cardType cardType
     *
     * @return $this
     */
    public function setCardType($cardType)
    {
        $this->container['cardType'] = $cardType;

        return $this;
    }

    /**
     * Gets imageUrl
     *
     * @return string|mixed
     */
    public function getImageUrl()
    {
        return $this->container['imageUrl'];
    }

    /**
     * Sets imageUrl
     *
     * @param string|mixed $imageUrl imageUrl
     *
     * @return $this
     */
    public function setImageUrl($imageUrl)
    {
        $this->container['imageUrl'] = $imageUrl;

        return $this;
    }

    /**
     * Gets videoUrl
     *
     * @return string|mixed
     */
    public function getVideoUrl()
    {
        return $this->container['videoUrl'];
    }

    /**
     * Sets videoUrl
     *
     * @param string|mixed $videoUrl videoUrl
     *
     * @return $this
     */
    public function setVideoUrl($videoUrl)
    {
        $this->container['videoUrl'] = $videoUrl;

        return $this;
    }

    /**
     * Gets jumpInfo
     *
     * @return \TencentAds\Model\WxSearchBrandAreaDocJumpInfo|mixed
     */
    public function getJumpInfo()
    {
        return $this->container['jumpInfo'];
    }

    /**
     * Sets jumpInfo
     *
     * @param \TencentAds\Model\WxSearchBrandAreaDocJumpInfo|mixed $jumpInfo jumpInfo
     *
     * @return $this
     */
    public function setJumpInfo($jumpInfo)
    {
        $this->container['jumpInfo'] = $jumpInfo;

        return $this;
    }

    /**
     * Gets menus
     *
     * @return \TencentAds\Model\WxSearchBrandAreaDocActivityInfoMenus[]|mixed
     */
    public function getMenus()
    {
        return $this->container['menus'];
    }

    /**
     * Sets menus
     *
     * @param \TencentAds\Model\WxSearchBrandAreaDocActivityInfoMenus[]|mixed $menus menus
     *
     * @return $this
     */
    public function setMenus($menus)
    {
        $this->container['menus'] = $menus;

        return $this;
    }

    /**
     * Gets activityBlock
     *
     * @return \TencentAds\Model\WxSearchBrandAreaDocActivityInfoActivityBlock|mixed
     */
    public function getActivityBlock()
    {
        return $this->container['activityBlock'];
    }

    /**
     * Sets activityBlock
     *
     * @param \TencentAds\Model\WxSearchBrandAreaDocActivityInfoActivityBlock|mixed $activityBlock activityBlock
     *
     * @return $this
     */
    public function setActivityBlock($activityBlock)
    {
        $this->container['activityBlock'] = $activityBlock;

        return $this;
    }

    /**
     * Gets finderUsername
     *
     * @return string|mixed
     */
    public function getFinderUsername()
    {
        return $this->container['finderUsername'];
    }

    /**
     * Sets finderUsername
     *
     * @param string|mixed $finderUsername finderUsername
     *
     * @return $this
     */
    public function setFinderUsername($finderUsername)
    {
        $this->container['finderUsername'] = $finderUsername;

        return $this;
    }

    /**
     * Gets hideNumberOfVisitors
     *
     * @return bool|mixed
     */
    public function getHideNumberOfVisitors()
    {
        return $this->container['hideNumberOfVisitors'];
    }

    /**
     * Sets hideNumberOfVisitors
     *
     * @param bool|mixed $hideNumberOfVisitors hideNumberOfVisitors
     *
     * @return $this
     */
    public function setHideNumberOfVisitors($hideNumberOfVisitors)
    {
        $this->container['hideNumberOfVisitors'] = $hideNumberOfVisitors;

        return $this;
    }

    /**
     * Gets hideSource
     *
     * @return bool|mixed
     */
    public function getHideSource()
    {
        return $this->container['hideSource'];
    }

    /**
     * Sets hideSource
     *
     * @param bool|mixed $hideSource hideSource
     *
     * @return $this
     */
    public function setHideSource($hideSource)
    {
        $this->container['hideSource'] = $hideSource;

        return $this;
    }

    /**
     * Gets hideDataLabel
     *
     * @return bool|mixed
     */
    public function getHideDataLabel()
    {
        return $this->container['hideDataLabel'];
    }

    /**
     * Sets hideDataLabel
     *
     * @param bool|mixed $hideDataLabel hideDataLabel
     *
     * @return $this
     */
    public function setHideDataLabel($hideDataLabel)
    {
        $this->container['hideDataLabel'] = $hideDataLabel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


